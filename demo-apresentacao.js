// demo-apresentacao.js - Script simplificado para apresenta√ß√£o
const axios = require('axios');

class DemoApresentacao {
    constructor() {
        this.baseURL = 'http://localhost:3000';
    }

    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async log(message, data = null) {
        console.log(`\nüîµ ${message}`);
        if (data) {
            console.log(JSON.stringify(data, null, 2));
        }
    }

    async verificarSistema() {
        console.log('\nüìä === VERIFICANDO SISTEMA ===');
        try {
            const response = await axios.get(`${this.baseURL}/health`);
            const health = response.data;
            
            console.log(`‚úÖ Sistema Status: ${health.status}`);
            console.log(`üìà Servi√ßos Saud√°veis: ${health.healthyServices}/${health.totalServices}`);
            console.log(`‚è±Ô∏è  Uptime: ${Math.round(health.uptime)}s`);
            
            return true;
        } catch (error) {
            console.error('‚ùå Sistema n√£o est√° dispon√≠vel:', error.message);
            return false;
        }
    }

    async mostrarRegistry() {
        console.log('\nüìã === SERVICE DISCOVERY ===');
        try {
            const response = await axios.get(`${this.baseURL}/registry`);
            const registry = response.data.registry;
            
            console.log('üîç Servi√ßos Registrados:');
            Object.entries(registry).forEach(([name, service]) => {
                console.log(`   ‚Ä¢ ${name}: ${service.url} (PID: ${service.pid})`);
            });
            
            console.log(`\nüìä Estat√≠sticas:`);
            console.log(`   ‚Ä¢ Total: ${response.data.stats.totalServices} servi√ßos`);
            console.log(`   ‚Ä¢ Saud√°veis: ${response.data.stats.healthyServices}`);
            console.log(`   ‚Ä¢ Uptime m√©dio: ${Math.round(response.data.stats.averageUptime/1000)}s`);
            
        } catch (error) {
            console.error('‚ùå Erro ao consultar registry:', error.message);
        }
    }

    async mostrarCatalogo() {
        console.log('\nüõí === CAT√ÅLOGO DE PRODUTOS ===');
        try {
            const response = await axios.get(`${this.baseURL}/api/items?limit=5`);
            const items = response.data.data;
            
            console.log(`üì¶ ${items.length} produtos encontrados:`);
            items.forEach((item, index) => {
                console.log(`   ${index + 1}. ${item.name} - R$ ${item.averagePrice} (${item.category})`);
            });
            
            console.log(`\nüíæ Banco NoSQL: ${response.data.pagination.total} itens total`);
            
        } catch (error) {
            console.error('‚ùå Erro ao buscar produtos:', error.message);
        }
    }

    async demonstrarFluxo() {
        console.log('\nüîÑ === FLUXO COMPLETO DE USU√ÅRIO ===');
        
        try {
            // 1. Registrar usu√°rio
            console.log('\n1Ô∏è‚É£ Registrando usu√°rio...');
            const userData = {
                email: 'demo@apresentacao.com',
                username: 'demo',
                password: 'demo123',
                firstName: 'Usu√°rio',
                lastName: 'Demo'
            };

            try {
                const registerResponse = await axios.post(`${this.baseURL}/api/auth/register`, userData);
                console.log('‚úÖ Usu√°rio registrado com sucesso');
            } catch (error) {
                if (error.response?.status === 409) {
                    console.log('‚ÑπÔ∏è  Usu√°rio j√° existe, continuando...');
                } else {
                    throw error;
                }
            }

            // 2. Login
            console.log('\n2Ô∏è‚É£ Fazendo login...');
            const loginResponse = await axios.post(`${this.baseURL}/api/auth/login`, {
                identifier: 'demo@apresentacao.com',
                password: 'demo123'
            });
            
            const token = loginResponse.data.data.token;
            console.log('‚úÖ Login realizado com sucesso');
            console.log(`üîë Token JWT gerado (${token.substring(0, 20)}...)`);

            // 3. Criar lista
            console.log('\n3Ô∏è‚É£ Criando lista de compras...');
            const listResponse = await axios.post(`${this.baseURL}/api/lists`, {
                name: 'Lista da Apresenta√ß√£o',
                description: 'Demonstra√ß√£o do sistema'
            }, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            
            const listId = listResponse.data.data.id;
            console.log('‚úÖ Lista criada com sucesso');
            console.log(`üìù ID da Lista: ${listId}`);

            // 4. Adicionar item
            console.log('\n4Ô∏è‚É£ Adicionando item √† lista...');
            const itemsResponse = await axios.get(`${this.baseURL}/api/items?limit=1`);
            const item = itemsResponse.data.data[0];
            
            await axios.post(`${this.baseURL}/api/lists/${listId}/items`, {
                itemId: item.id,
                quantity: 2,
                notes: 'Item da apresenta√ß√£o'
            }, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            
            console.log(`‚úÖ Item "${item.name}" adicionado √† lista`);
            console.log(`üí∞ Pre√ßo estimado: R$ ${item.averagePrice * 2}`);

            // 5. Dashboard
            console.log('\n5Ô∏è‚É£ Consultando dashboard...');
            const dashboardResponse = await axios.get(`${this.baseURL}/api/dashboard`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            
            console.log('‚úÖ Dashboard obtido com sucesso');
            console.log('üìä Dados agregados de todos os servi√ßos');

        } catch (error) {
            console.error('‚ùå Erro no fluxo:', error.response?.data || error.message);
        }
    }

    async executarDemo() {
        console.log('üöÄ === DEMONSTRA√á√ÉO DE MICROSSERVI√áOS ===');
        console.log('Sistema de Listas de Compras - PUC Minas\n');

        // Verificar se sistema est√° rodando
        const sistemaOk = await this.verificarSistema();
        if (!sistemaOk) {
            console.log('\n‚ùå Sistema n√£o est√° dispon√≠vel. Execute "npm start" primeiro.');
            return;
        }

        await this.delay(1000);

        // Mostrar registry
        await this.mostrarRegistry();
        await this.delay(1000);

        // Mostrar cat√°logo
        await this.mostrarCatalogo();
        await this.delay(1000);

        // Demonstrar fluxo completo
        await this.demonstrarFluxo();

        console.log('\nüéâ === DEMONSTRA√á√ÉO CONCLU√çDA ===');
        console.log('‚úÖ Todos os conceitos de microsservi√ßos foram demonstrados:');
        console.log('   ‚Ä¢ Service Discovery autom√°tico');
        console.log('   ‚Ä¢ Bancos NoSQL independentes');
        console.log('   ‚Ä¢ API Gateway com roteamento');
        console.log('   ‚Ä¢ Autentica√ß√£o JWT distribu√≠da');
        console.log('   ‚Ä¢ Agrega√ß√£o de dados');
        console.log('   ‚Ä¢ Resili√™ncia com circuit breaker');
    }
}

// Executar demonstra√ß√£o
async function main() {
    const demo = new DemoApresentacao();
    await demo.executarDemo();
}

// Tratamento de erros
process.on('unhandledRejection', (error) => {
    console.error('‚ùå Erro n√£o tratado:', error);
    process.exit(1);
});

// Executar se chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = DemoApresentacao;
